#!/usr/bin/env bash

# Get System Updates, Update NodeJS/NPM, Update rust/Rustup, etc...
# Source: https://github.com/sapegin/dotfiles/blob/master/setup/update.sh

trap on_error SIGTERM

# Set directory
export DOTFILES=${1:-"$HOME/.dotfiles"}
SCRIPT_DIR="${DOTFILES}/scripts"

source "${SCRIPT_DIR}/utils"

update_dotfiles() {
	info "Updating dotfiles..."

	cd "${DOTFILES}" || exit
	git pull origin main
	./install --except shell
	cd - >/dev/null 2>&1 || exit

	info "Updating shell plugins with Sheldon..."
	sheldon lock --update

	finish
}

update_system() {
	package_manager="$(find_package_manager)"

	"${package_manager}"_update
}

rpm_update() {
	sudo -v
	sudo dnf upgrade --refresh -y
}

arch_update() {
	sudo -v
	sudo pacman -Syu
}

npm_update() {
	if ! _exists npm; then
		return
	fi

	info "Updating packages installed globally with NPM..."
	echo

	if _exists nvm; then
		nvm install-latest-npm
	else
		npm install npm -g
	fi

	npm update -g

	finish
}

nvm_node_version() {
	printf %s "$(nvm ls "$1" | cut -s -d'.' -f'1,2' | cut -d'v' -f2 | cut -d'.' -f'1')"
}

system_node_version() {
	printf %s "$(node --version | cut -s -d'.' -f'1,2' | cut -d'v' -f2 | cut -d'.' -f'1')"
}

get_node_version() {
	if _exists nvm; then
		printf %s "$(nvm_node_version "$1")"
	else
		printf %s "$(system_node_version)"
	fi
}

nvm_lts_versions() {
	printf "%s\n" "$(nvm ls | grep "lts" | grep -Fv 'N/A' | grep -Fv '*' | cut -d'v' -f2 | cut -d'.' -f'1')"
}

update_all_node() {
	if ! _exists nvm; then
		info "Node Version Manager (nvm) not found. Unable to automatically update NodeJS."
		echo

		return
	fi

	info "Attempting to update all installed versions of NodeJS."
	echo

	start_version=$(get_node_version "current")
	default_node_version=$(get_node_version "default")

	info "Updating current active version of NodeJS."
	echo

	nvm install "${start_version}" --latest-npm

	if [[ "${default_node_version}" -ne "${start_version}" ]]; then
		info "Updating default version of NodeJS."
		echo

		nvm install "${default_node_version}"
	fi

	nvm_lts_versions | while read -r lts_version; do
		echo

		if [[ "${lts_version}" -ne "${start_version}" ]]; then
			info "Updating Node LTS ${lts_version}."
			nvm install "${lts_version}"
		fi
	done

	current_version="$(get_node_version "current")"
	if [[ "${current_version}" -ne "${start_version}" ]]; then
		# Ensure we are using the version of node we started with
		info "Switching back to the version of NodeJS we started with."
		echo

		nvm use "${current_version}"
	fi

	finish
}

update_rust() {
	if ! _exists rustup; then
		return
	fi

	info "Updating Rust..."
	echo

	rustup update

	finish
}

on_start() {
	info "     |-|                                             |-|     "
	info "     |-|           Custom update utility.            |-|     "
	info "     |-|                                             |-|     "
	info "     |-|      This script will attempt to update     |-|     "
	info "     |-|    the dotfiles repo and system packages.   |-|     "
	info "     |-|                                             |-|     "
	info "     |-|                                             |-|     "
	info "     |-|          created by @denysdovhan            |-|     "
	info "     |-|            forked by @BigMikeM              |-|     "
	info "     |-|                                             |-|     "

	echo
}

on_finish() {
	success "Done with system update!"
	success "Happy Coding!"
}

on_error() {
	error "ERROR!"
	error "Something went wrong."
	exit 1
}

main() {

	on_start "$*"

	echo "Please enter your password to get started:"
	sudo -v

	update_dotfiles "$*"
	update_system "$*"
	update_rust "$*"
	update_all_node "$*"
	npm_update "$*"
	on_finish "$*"
}

main "$*"
