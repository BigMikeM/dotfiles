#!/bin/bash

# Get System Updates, Update NodeJS/NPM, Update rust/Rustup, etc...
# Source: https://github.com/sapegin/dotfiles/blob/master/setup/update.sh

set -eu
trap on_error SIGTERM

# Set directory
export DOTFILES=${1:-"$HOME/.dotfiles"}
SCRIPT_DIR="${DOTFILES}/scripts"

source "${SCRIPT_DIR}/utils"

update_dotfiles() {
	info "Updating dotfiles..."

	cd "$DOTFILES" || exit
	git pull origin main
	./install --except shell
	cd - >/dev/null 2>&1 || exit

	info "Updating shell plugins with Sheldon..."
	sheldon lock --update

	finish
}

update_system() {
	info "Updating software installed with system package manager."
	package_manager="$(find_package_manager)"

	"${package_manager}"_update
	finish
}

rpm_update() {
	sudo dnf upgrade --refresh -y
}

arch_update() {
	if _exists pacman; then
		if _exists paru; then
			paru -Syu --noconfirm
			return
		fi
		sudo pacman -Syu --noconfirm
	fi
}

apt_update() {
	if _exists apt-get; then
		if _exists apt; then
			sudo apt update && sudo apt upgrade --yes
			return
		fi
		sudo apt-get update && sudo apt-get upgrade --yes
	fi
}

cargo_update() {
	info "Updating packages installed with Cargo."
	cargo install-update -a
	finish
}

nvm_node_version() {
	printf %s "$(nvm ls "$1" | cut -s -d'.' -f'1,2' | cut -d'v' -f2 | cut -d'.' -f'1')"
}

system_node_version() {
	printf %s "$(node --version | cut -s -d'.' -f'1,2' | cut -d'v' -f2 | cut -d'.' -f'1')"
}

get_node_version() {
	if _exists nvm; then
		printf %s "$(nvm_node_version "$1")"
	else
		printf %s "$(system_node_version)"
	fi
}

nvm_lts_versions() {
	printf "%s\n" "$(nvm ls | grep "lts" | grep -Fv 'N/A' | grep -Fv '*' | cut -d'v' -f2 | cut -d'.' -f'1')"
}

update_all_node() {
	if ! _exists nvm; then
		info "Node Version Manager (nvm) not found. Unable to automatically update NodeJS."
		echo

		return
	fi

	local start
	local default
	start=$(get_node_version "current")
	default=$(get_node_version "default")

	info "Updating current active version of NodeJS."
	echo

	nvm install "$start" --latest-npm

	if [[ "$default" != "$start" ]]; then
		info "Updating default version of NodeJS."
		echo

		nvm install "$default" --latest-npm
	fi

	nvm_lts_versions | while read -r lts; do
		echo

		if [[ "$lts" != "$start" ]] &&
			[[ "$lts" != "$default" ]]; then
			info "Updating Node LTS ${lts}."
			nvm install "$lts" --latest-npm
		fi
	done

	current="$(get_node_version "current")"
	if [[ "$current" != "$start" ]]; then
		# Ensure we are using the version of node we started with
		info "Switching back to the version of NodeJS we started with."
		echo

		nvm use "$current"
	fi

	finish
}

flatpak_update() {
	if _exists flatpak; then
		info "Updating Flatpak packages..."
		flatpak update -y
	fi
}

npm_update() {
	info "Updating software installed globally with NPM."

	npm update -g

	finish
}

update_rust() {
	if ! _exists rustup; then
		return
	fi

	info "Updating Rust..."
	echo

	rustup update

	finish
}

on_start() {
	info "     |-|                                             |-|     "
	info "     |-|           Custom update utility.            |-|     "
	info "     |-|                                             |-|     "
	info "     |-|      This script will attempt to update     |-|     "
	info "     |-|    the dotfiles repo and system packages.   |-|     "
	info "     |-|                                             |-|     "
	info "     |-|                                             |-|     "
	info "     |-|          created by @denysdovhan            |-|     "
	info "     |-|            forked by @BigMikeM              |-|     "
	info "     |-|                                             |-|     "

	echo
}

main() {

	on_start "$*"

	echo "Please enter your password to get started:"
	sudo -v

	update_dotfiles "$*"
	update_system "$*"
	update_rust "$*"
	update_all_node "$*"
	cargo_update
	flatpak_update
	npm_update "$*"
	on_finish "$*"
}

main "$*"
