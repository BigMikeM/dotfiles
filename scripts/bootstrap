#!/usr/bin/env bash

# Dotfiles and bootstrap installer

set -e
IFS=$'\t\n'
trap on_error SIGTERM

# Set directory
export DOTFILES="$HOME/.dotfiles"
export SCRIPTS="$DOTFILES/scripts/"

# Imports
source "${SCRIPTS}/utils"
source "${SCRIPTS}/package_list"

on_start() {
	info "     |-|                                             |-|     "
	info "     |-|         Custom dotfiles bootstrap.          |-|     "
	info "     |-|                                             |-|     "
	info "     |-|     This script will attempt to install     |-|     "
	info "     |-|      and set up a curated selection of      |-|     "
	info "     |-|        GUI and CLI apps, as well as         |-|     "
	info "     |-|         custom configuration files.         |-|     "
	info "     |-|                                             |-|     "
	info "     |-|          created by @denysdovhan            |-|     "
	info "     |-|            forked by @BigMikeM              |-|     "
	info "     |-|                                             |-|     "

	info "This script will attempt to install and set up desired software."
	printf "%s\n" ""

	read -rp "Would you like to proceed with installation? [y/N] " -n 1 answer
	echo

	if [ "${answer,,}" != "y" ]; then
		exit 1
	fi
}

install_lazygit() {
	if ! _exists go version; then
		return 1
	else
		go install github.com/jesseduffield/lazygit@latest
	fi
}

find_package_manager() {
	local manager=""
	# if _exists apt; then
	# 	manager="apt"
	# fi
	if _exists dnf; then
		manager="rpm"
	fi
	if _exists pacman; then
		manager="arch"
	fi

	if [[ -n "${manager}" ]]; then
		printf %s "${manager}"
	else
		warn "No supported package manager found."
	fi
}

# apt_install() {
#   sudo -v
#   sudo apt install "${apt_packages[@]}"
# }

rpm_install() {
	sudo -v
	sudo dnf install --refresh -y "${rpm_packages[@]}"
}

arch_install() {
	sudo -v
	sudo pacman -Sy "${arch_packages[@]}"
}

install_software() {

	eval "$(find_package_manager)_install"

	finish
}

on_finish() {
	printf "%s\n" ""
	success "Setup was successfully done!"
	success "Happy Coding!"
}

on_error() {
	printf "%s\n" ""
	error "ERROR"
	error "Something broke."
	printf "%s\n" ""
	exit 1
}

check_software_for_setup() {

	info "Checking for apps which will need to be set up after bootstrap..."

	software_to_check=(
		sheldon
		gh
		nvm
	)

	software_to_setup=("yay")

	for i in "${software_to_check[@]}"; do
		if ! _exists "$i"; then
			software_to_setup+=("$i")

			info "${i} was not found. Adding to setup list."
		fi

		if _exists "$i"; then
			info "Found ${i}..."
		fi
	done

	finish
}

_set_up_nvm() {

	info "Setting up Node Version Manager"
	info "This will install the latest version of NodeJS."
	read -rp "Would you also like to install the latest LTS release? [y/N]" -n 1 answer
	# vared -p "Would you like the latest LTS release? [y/N]" -c anwser
	printf "%s\n" ""

	nvm install node

	if [ "${answer,,}" == "y" ]; then
		info "You chose to install the latest NodeJS lts."
		nvm install --lts
	fi

	finish
}

_set_up_sheldon() {

	info "Setting up Sheldon."
	printf "%s\n" ""

	sheldon lock --update

	finish
}

_set_up_gh() {

	info "Setting up GitHub CLI."
	info "This will also set up SSH to connect your git repos with GitHub."
	printf "%s\n" ""
	gh auth login

	finish
}

_set_up_lvim() {

	if ! _exists nvim; then
		exit
	fi

	info "LunarVim setup is not yet complete."
	info "Skipping."
	printf "%s\n" ""
	finish

}

_set_up_yay() {
	info "Setting up Yay: Yet another Yaourt"
	printf "%s\n" ""
	yay -Y --gendb
	yay -Y --devel --combinedupgrade --batchinstall --save

	_set_up_pacman

	finish
}

_set_up_pacman() {

	info "Editing your pacman.conf will require elevated access"
	sudo -v

	sudo sed -Ei "s/(^\#\s*)(Color.*)/\2/g" "/etc/pacman.conf"
	sudo sed -Ei "s/(^\#\s*)(VerbosePackageLists.*)/\2/g" "/etc/pacman.conf"
}

_init_app() {

	local app="$1"

	if ! _exists "$app"; then
		return
	fi

	eval "_set_up_$1" ||
		warn "No setup function found for [$i]" \
			info "Skipping setup of [$i]"
	printf "%s\n" ""
	return
}

set_up_software() {

	info "Attempting to initialize new apps."

	for i in "${software_to_setup[@]}"; do
		_init_app "$i"
	done

	finish
}

main() {
	on_start
	# check_software_for_setup "$*"
	# install_yay "$*"
	install_software "$*"
	on_finish "$*"
}

main "$*"
