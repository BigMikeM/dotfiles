#!/bin/bash

# Dotfiles and bootstrap installer

# shellcheck source="./utils"
# shellcheck source="./package_list"
set -eu
trap on_error SIGTERM

# Set directory
export DOTFILES="$HOME/.dotfiles"
export SCRIPTS="$DOTFILES/scripts/"

# Imports
source "${SCRIPTS}/utils"
source "${SCRIPTS}/package_list"

PACKAGE_MANAGER="$(find_package_manager)"

on_start() {
	info "     |-|                                             |-|     "
	info "     |-|         Custom dotfiles bootstrap.          |-|     "
	info "     |-|                                             |-|     "
	info "     |-|     This script will attempt to install     |-|     "
	info "     |-|      and set up a curated selection of      |-|     "
	info "     |-|        GUI and CLI apps, as well as         |-|     "
	info "     |-|         custom configuration files.         |-|     "
	info "     |-|                                             |-|     "
	info "     |-|          created by @denysdovhan            |-|     "
	info "     |-|            forked by @BigMikeM              |-|     "
	info "     |-|                                             |-|     "

	info "This script will attempt to install and set up desired software."
	echo

	read -rp "Would you like to proceed with installation? [y/N]: " -n 1 answer
	echo

	if [ "${answer,,}" != "y" ]; then
		info "Exiting Script."
		exit 1
	fi

	echo "Please enter your password to get started:"
	sudo -v

}

install_go() {
	if _exists go; then
		return
	fi

	info "Now beginning the installation of: [Go]"
	read -rp "Would you like to proceed with this install? [y/N]: " -n 1 answer
	echo

	if [ "${answer,,}" != "y" ]; then
		info "Skipping Go installation."
		exit 1
	fi

	info "Installing Go."

	# Fetch the latest version of Go from the official website
	local latest_version
	latest_version=$(curl 'https://golang.org/VERSION?m=text') ||
		on_error "Couldn't fetch the latest version of Go."

	# Download the latest version
	curl -O "https://dl.google.com/go/${latest_version}.linux-amd64.tar.gz"

	# Unpack the tarball
	sudo tar -C /usr/local -xzf "${latest_version}.linux-amd64.tar.gz"

	# Remove the downloaded tarball
	rm "${latest_version}.linux-amd64.tar.gz"

}

install_lazygit() {
	if _exists lazygit; then
		return
	fi

	info "Now beginning the installation of: [Lazygit]"
	read -rp "Would you like to proceed with this install? [y/N]: " -n 1 answer
	echo

	if [ "${answer,,}" != "y" ]; then
		info "Skipping Lazygit installation."
		exit 1
	fi

	if ! _exists go || _exists lazygit; then
		return
	fi
	info "Installing lazygit using golang."
	go install github.com/jesseduffield/lazygit@latest

}

install_nvm() {
	if _exists nvm; then
		return
	fi

	info "Now beginning the installation of: [Node Version Manager]"
	bash -c "export PROFILE=/dev/null;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash"

	# Source the nvm script to make nvm available in the current shell session
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

	info "Installing Node LTS."
	nvm install --lts

	read -rp "Would you also like to install the latest version of Node? [y/N]: " -n 1 answer
	echo

	if [[ "${answer,,}" == "y" ]]; then
		nvm install node
	fi
}

install_rustup() {
	if _exists rustup; then
		return
	fi

	info "Installing Rustup"
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

	info "Installing latest stable version of Rust and Cargo."
	source "$HOME/.cargo/env"
	rustup default stable
}

cargo_install() {
	info "Installing extras with Cargo."
	cargo install "${cargo_packages[@]}"

	sheldon lock --update
}

apt_install() {
	sudo apt install "${apt_packages[@]}"
}

rpm_install() {
	sudo dnf install --refresh -y "${rpm_packages[@]}"
	sudo dnf group install --with-optional "${rpm_groups[@]}"
}

arch_install() {
	sudo pacman -Sy --needed --noconfirm "${arch_packages[@]}"
}

pip_install() {
	pip install "${pip_packages[@]}"
}

install_astronvim() {
	info "Now beginning the installation of: [AstroNvim]"
	read -rp "Would you like to proceed with this install? [y/N]: " -n 1 answer
	echo

	if [[ "${answer,,}" != "y" ]]; then
		info "Skipping AstroNvim installation."
		echo
		return
	fi

	info "Starting the AstroNvim installer."
	# Back up existing Neovim configuration
	[[ -d ~/.config/nvim ]] &&
		info "Backing up current NeoVim configuration to ~/.config/nvim.bak"
	mv ~/.config/nvim ~/.config/nvim.bak
	# Clean existing NeoVim folders
	if [[ -d ~/.local/share/nvim ]]; then
		info "Backing up local NeoVim folders."
		info 'mv ~/.local/share/nvim -> ~/.local/share/nvim.bak'
		mv ~/.local/share/nvim ~/.local/share/nvim.bak
		info '~/.local/state/nvim -> ~/.local/state/nvim.bak'
		mv ~/.local/state/nvim ~/.local/state/nvim.bak
		info '~/.cache/nvim -> ~/.cache/nvim.bak'
		mv ~/.cache/nvim ~/.cache/nvim.bak
	fi
	git clone --depth 1 https://github.com/AstroNvim/template ~/.config/nvim
	rm -rf ~/.config/nvim/.git

	info "AstroNvim installed successfully."
	info "Please run NeoVim (nvim) after bootstrap finishes to complete the installation of AstroNvim."
	finish
}

install_software() {

	info "Installing sofware with system package manager."

	"${PACKAGE_MANAGER}"_install

	finish
}

install_neovim() {

	info "This script will attempt to install the latest stable version of Neovim using the appimage."
	info "This is only necessary if you need a recent version of NeoVim and your distro does not include it."
	if _exists nvim; then
		local nvim_version
		nvim_version="$(nvim -v | head -1 | cut -d"v" -f2)"
		info "Currently installed version of NeoVim: [$nvim_version]"
	else
		info "NeoVim does not appear to be installed."
	fi

	read -rp "Would you like to proceed with installation? [y/N]: " -n 1 answer
	echo

	if [[ "${answer,,}" != "y" ]]; then
		info "Skipping NeoVim Appimage installation."
		return
	fi

	# Download the latest Neovim AppImage
	wget -O /tmp/nvim.appimage https://github.com/neovim/neovim/releases/latest/download/nvim.appimage

	# Make the downloaded file executable
	chmod +x /tmp/nvim.appimage

	# Move the AppImage to /usr/local
	sudo mv /tmp/nvim.appimage /usr/local/bin/nvim

	info "NeoVim AppImage installed successfully."
}

set_zsh() {
	local shell
	if ! _exists zsh; then
		warn "ZSH not found! Other shells are not currently supported"
		return
	fi
	shell="$(_user_default_shell)"
	if [[ "${shell,,}" != "zsh" ]]; then
		info "Default shell will be changed to ZSH."

		read -p "Are you sure you want to change the default shell to ZSH? (y/n) " -n 1 -r
		echo
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			chsh -s "$(which zsh)"
		fi
	fi
}

install_external_required() {
	install_rustup
	cargo_install
	# pip_install
}

install_external_optional() {
	install_neovim
	install_nvm
	install_go
	install_lazygit
	install_astronvim
}

install_external() {

	info "Installing external software."

	install_external_required
	install_external_optional
}

main() {
	on_start
	install_software
	install_external
	set_zsh
	on_finish
}

main "$*"
