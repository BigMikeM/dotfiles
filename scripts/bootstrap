#!/bin/bash

# Dotfiles and bootstrap installer

# shellcheck source-path=SCRIPTDIR
# shellcheck source=scripts/utils
# shellcheck source=scripts/package_list
set -eu
trap on_error SIGTERM

# Set directory
export DOTFILES="$HOME/.dotfiles"
export SCRIPTS="$DOTFILES/scripts/"

# Imports
source "${SCRIPTS}/utils"
source "${SCRIPTS}/package_list"
#source "${DOTFILES}/bin/appi"

PACKAGE_MANAGER="$(find_package_manager)"

on_start() {
	info "     |-|                                             |-|     "
	info "     |-|         Custom dotfiles bootstrap.          |-|     "
	info "     |-|                                             |-|     "
	info "     |-|     This script will attempt to install     |-|     "
	info "     |-|      and set up a curated selection of      |-|     "
	info "     |-|        GUI and CLI apps, as well as         |-|     "
	info "     |-|         custom configuration files.         |-|     "
	info "     |-|                                             |-|     "
	info "     |-|          created by @denysdovhan            |-|     "
	info "     |-|            forked by @BigMikeM              |-|     "
	info "     |-|                                             |-|     "

	info "This script will attempt to install and set up desired software."
	echo

	read -rp "Would you like to proceed with installation? [y/N]: " -n 1 answer
	echo

	if [ "${answer,,}" != "y" ]; then
		info "Exiting Script."
		exit 1
	fi

	echo "Please enter your password to get started:"
	sudo -v

}

install_go() {
	if _exists go; then
		return
	fi

	info "Now beginning the installation of: [Go]"
	read -rp "Would you like to proceed with this install? [y/N]: " -n 1 answer
	echo

	if [ "${answer,,}" != "y" ]; then
		info "Skipping Go installation."
		exit 1
	fi

	info "Installing Go."

	# Fetch the latest version of Go from the official website
	local latest_version
	latest_version=$(curl 'https://golang.org/VERSION?m=text') ||
		on_error "Couldn't fetch the latest version of Go."

	# Download the latest version
	curl -O "https://dl.google.com/go/${latest_version}.linux-amd64.tar.gz"

	# Unpack the tarball
	sudo tar -C /usr/local -xzf "${latest_version}.linux-amd64.tar.gz"

	# Remove the downloaded tarball
	rm "${latest_version}.linux-amd64.tar.gz"

}

install_lazygit() {
	if _exists lazygit; then
		return
	fi

	info "Now beginning the installation of: [Lazygit]"
	read -rp "Would you like to proceed with this install? [y/N]: " -n 1 answer
	echo

	if [ "${answer,,}" != "y" ]; then
		info "Skipping Lazygit installation."
		exit 1
	fi

	if ! _exists go || _exists lazygit; then
		return
	fi
	info "Installing lazygit using golang."
	go install github.com/jesseduffield/lazygit@latest

}

install_nvm() {
	if _exists nvm; then
		return
	fi

	info "Now beginning the installation of: [Node Version Manager]"
	bash -c "export PROFILE=/dev/null;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash"

	export NVM_DIR="$HOME/.config//nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

	info "Installing Node LTS."
	nvm install --lts

	read -rp "Would you also like to install the latest version of Node? [y/N]: " -n 1 answer
	echo

	if [[ "${answer,,}" == "y" ]]; then
		nvm install node
	fi
}

install_rustup() {
	if _exists rustup; then
		return
	fi

	info "Installing Rustup"
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

	info "Installing latest stable version of Rust and Cargo."
	rustup default stable
}

install_alacritty() {
	if _exists alacritty; then
		return
	fi
	info "Now beginning the installation of: [Alacritty]"
	read -rp "Would you like to proceed with this install? [y/N]: " -n 1 answer
	echo
	if [[ "${answer,,}" != "y" ]]; then
		info "Skipping Alacritty installation."
		return
	fi
	if ! _exists rustup; then
		warn "Rustup is required to install Alacritty."
		return
	fi

	ALACRITTY_BUILD_DIR="$HOME/alacritty"

	info "Installing Alacritty"
	info "Creating build directory at $ALACRITTY_BUILD_DIR"

	# Installation steps were taken from the Alacritty GitHub repository
	# https://github.com/alacritty/alacritty/blob/master/INSTALL.md#clone-the-source-code

	# Clone the Alacritty GitHub repository
	git clone https://github.com/alacritty/alacritty.git "$ALACRITTY_BUILD_DIR"
	cd "$ALACRITTY_BUILD_DIR" || on_error "Couldn't move to $ALACRITTY_BUILD_DIR."

	# Set stable cargo and build Alacritty
	rustup override set stable
	cargo build --release

	# Install terminfo file
	sudo tic -xe alacritty,alacritty-direct extra/alacritty.info

	# Copy binary to path
	sudo cp target/release/alacritty /usr/local/bin

	# Create desktop file
	sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
	sudo desktop-file-install extra/linux/Alacritty.desktop
	sudo update-desktop-database

	# Install manpages
	sudo mkdir -p /usr/local/share/man/man1
	sudo mkdir -p /usr/local/share/man/man5
	scdoc <extra/man/alacritty.1.scd | gzip -c | sudo tee /usr/local/share/man/man1/alacritty.1.gz >/dev/null
	scdoc <extra/man/alacritty-msg.1.scd | gzip -c | sudo tee /usr/local/share/man/man1/alacritty-msg.1.gz >/dev/null
	scdoc <extra/man/alacritty.5.scd | gzip -c | sudo tee /usr/local/share/man/man5/alacritty.5.gz >/dev/null
	scdoc <extra/man/alacritty-bindings.5.scd | gzip -c | sudo tee /usr/local/share/man/man5/alacritty-bindings.5.gz >/dev/null

	# Install shell completions
	mkdir -p "${ZDOTDIR:-~}"/.zsh_functions
	echo 'fpath+=${ZDOTDIR:-~}/.zsh_functions' >>"${ZDOTDIR:-~}"/.zshrc
	cp extra/completions/_alacritty "${ZDOTDIR:-~}"/.zsh_functions/_alacritty

	info "Alacritty was installed successfully."

}

enable_nonfree_apt() {
	# Check if non-free repositories are already enabled
	if ! grep -Pq "deb[^#]*non-free.*" /etc/apt/sources.list; then
		# Enable non-free repository
		sudo sed -i '/^deb /s/$/ non-free/' /etc/apt/sources.list
		# Update package list
		sudo apt update
	fi
	# Install non-free codecs package
	sudo apt install ffmpeg
}

enable_nonfree_rpm() {
	sudo dnf install -y "${rpm_nonfree[@]}"
}

enable_nonfree_codecs() {
	read -rp "Would you like enable and install non-free software? [y/N]: " -n 1 response
	if [[ "${response,}" != "y" ]]; then
		echo "Installation of non-free software canceled."
		return
	fi

	enable_nonfree_"$PACKAGE_MANAGER"

}

cargo_install() {
	info "Installing extras with Cargo."
	cargo install "${cargo_packages[@]}"

	sheldon lock --update
}

apt_install() {
	sudo apt install "${apt_packages[@]}"
}

rpm_install() {
	sudo dnf install --refresh -y "${rpm_packages[@]}"
	sudo dnf group install --with-optional "${rpm_groups[@]}"
}

arch_install() {
	sudo pacman -Sy --needed --noconfirm "${arch_packages[@]}"
}

pip_install() {
	pip install "${pip_packages[@]}"
}

install_lunarvim() {
	if _exists lvim; then
		return
	fi

	info "Now beginning the installation of: [Lunarvim]"
	read -rp "Would you like to proceed with this install? [y/N]: " -n 1 answer
	echo

	if [[ "${answer,,}" != "y" ]]; then
		info "Skipping Lunarvim installation."
		echo
		return
	fi

	info "Starting the LunarVim installer."
	LV_BRANCH='release-1.3/neovim-0.9' bash <(curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/release-1.3/neovim-0.9/utils/installer/install.sh)

	finish
}

install_software() {

	info "Installing sofware with system package manager."

	"${PACKAGE_MANAGER}"_install

	finish
}

install_neovim_appimage() {

	info "This script will attempt to install the latest stable version of Neovim using the appimage."
	info "This is only necessary if you need a recent version of NeoVim and your distro does not include it."
	if _exists nvim; then
		local nvim_version
		nvim_version="$(nvim -v | head -1 | cut -d"v" -f2)"
		info "Currently installed version of NeoVim: [$nvim_version]"
	else
		info "NeoVim does not appear to be installed."
	fi

	read -rp "Would you like to proceed with installation? [y/N]: " -n 1 answer
	echo

	if [[ "${answer,,}" != "y" ]]; then
		info "Skipping NeoVim Appimage installation."
		return
	fi

	mkdir -p ~/temp/
	cd "$HOME/temp/" || on_error "Couldn't move to \"$HOME/temp/\"."

	# Get the download URL for the latest Neovim AppImage
	download_url=$(curl -s https://api.github.com/repos/neovim/neovim/releases/latest | grep "browser_download_url" | grep "nvim.appimage" | cut -d '"' -f 4 | head -1)

	# Download the latest Neovim AppImage
	wget "$download_url"

	sudo mkdir /opt/nvim/
	sudo mv -f nvim.appimage /opt/nvim/nvim

	info "NeoVim was installed to /opt/nvim/nvim"

	rm -f nvim.appimage
	cd - || on_error "Unable to change directories."
}

npm_install() {

	if ! _exists npm; then
		return
	fi

	info "Installing global npm packages..."

	npm install -g "${npm_packages[*]}"

	finish
}

set_zsh() {
	local shell
	if ! _exists zsh; then
		warn "ZSH not found! Other shells are not currently supported"
		return
	fi
	shell="$(_user_default_shell)"
	if [[ "${shell,,}" != "zsh" ]]; then
		info "Default shell will be changed to ZSH."

		read -p "Are you sure you want to change the default shell to ZSH? (y/n) " -n 1 -r
		echo
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			chsh -s "$(which zsh)"
		fi
	fi
}

install_external_required() {
	install_rustup
	cargo_install
	pip_install
}

install_external_optional() {
	install_neovim_appimage
	#install_nvm
	install_lazygit
	install_lunarvim
	# npm_install

	enable_nonfree_codecs
}

install_external() {

	info "Installing external software."

	install_external_required
	install_external_optional
}

main() {
	on_start
	install_software
	install_external
	set_zsh
	on_finish
}

main "$*"
