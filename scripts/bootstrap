#!/usr/bin/env bash

# Dotfiles and bootstrap installer

set -eu
IFS=$'\t\n'
trap on_error SIGTERM

# Set directory
export DOTFILES="$HOME/.dotfiles"
export SCRIPTS="$DOTFILES/scripts/"

# Imports
source "${SCRIPTS}/utils"
source "${SCRIPTS}/package_list"

on_start() {
	info "     |-|                                             |-|     "
	info "     |-|         Custom dotfiles bootstrap.          |-|     "
	info "     |-|                                             |-|     "
	info "     |-|     This script will attempt to install     |-|     "
	info "     |-|      and set up a curated selection of      |-|     "
	info "     |-|        GUI and CLI apps, as well as         |-|     "
	info "     |-|         custom configuration files.         |-|     "
	info "     |-|                                             |-|     "
	info "     |-|          created by @denysdovhan            |-|     "
	info "     |-|            forked by @BigMikeM              |-|     "
	info "     |-|                                             |-|     "

	info "This script will attempt to install and set up desired software."
	printf "\n"

	read -rp "Would you like to proceed with installation? [y/N] " -n 1 answer
	echo

	if [ "${answer,,}" != "y" ]; then
		exit 1
	fi
}

install_lazygit() {
	if ! _exists go version; then
		return 1
	fi
	info "Installing lazygit using golang."
	go install github.com/jesseduffield/lazygit@latest

}

install_nvm() {
	info "Installing Node Version Manager."
	PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'

	info "Installing Node LTS."
	export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

	nvm install --lts

	read -rp "Would you also like to install the latest version of Node? [y/N]" -n 1 answer

	if [[ "${answer,,}" == "y" ]]; then
		nvm install node
	fi
}

install_rustup() {
	info "Installing Rustup"
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

	info "Installing latest stable version of Rust and Cargo."
	rustup default stable

}

cargo_install() {
	info "Installing extras with Cargo."
	cargo install "${cargo_packages}"

	sheldon lock --update
}

# apt_install() {
#   sudo -v
#   sudo apt install "${apt_packages[@]}"
# }

rpm_install() {
	sudo -v
	sudo dnf install --refresh -y "${rpm_packages[@]}"
}

arch_install() {
	sudo -v
	sudo pacman -Sy --needed "${arch_packages[@]}"
}

install_lunarvim() {
	info "Starting the LunarVim installer."
	LV_BRANCH='release-1.3/neovim-0.9' bash <(curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/release-1.3/neovim-0.9/utils/installer/install.sh)

	# This is intended for Ubuntu/Snap-based systems.
	# TODO: Ensure snap command is correct; update nvim snap install location; correct lvim bin location
	# if _exists snap; then
	# 	info "Snap detected on your system. ${HOME}/.local/bin/lvim needs to be tweaked if Neovim is installed with Snap."
	# 	if [[ "$(which nvim)" == "/snap" ]]; then
	# 		sed -ir "s///g" "${HOME}/.local/bin/lvim"
	# 	fi
	# fi
}

install_software() {

	info "Installing sofware with system package manager."

	"$(find_package_manager)"_install

	finish
}

set_zsh() {
	info "Default shell will be changed to ZSH."

	chsh -s "$(which zsh)"
}
main() {
	on_start
	install_software "$*"
	on_finish "$*"
}

main "$*"
